name: Build Windows MSI Installer

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version override (optional)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up version
      id: version
      run: |
        $ErrorActionPreference = 'Stop'
        $version = if ($env:GITHUB_EVENT_NAME -eq 'push' -and $env:GITHUB_REF -match '^refs/tags/v') {
            $env:GITHUB_REF -replace '^refs/tags/v',''
        } elseif ('${{ github.event.inputs.version }}') {
            '${{ github.event.inputs.version }}'
        } else {
            Get-Date -Format "yyyy.MM.dd.HHmm"
        }
        "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "version=$version" >> $env:GITHUB_OUTPUT
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Install WiX Toolset
      run: |
        $wixToolsetUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe"
        Invoke-WebRequest -Uri $wixToolsetUrl -OutFile wix311.exe
        Start-Process -FilePath .\wix311.exe -ArgumentList "/install","/quiet" -NoNewWindow -Wait
        echo "$env:WIX\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      continue-on-error: false
    
    - name: Install cargo-wix
      run: |
        cargo install cargo-wix --force
      continue-on-error: false
    
    - name: Install OpenSSL
      run: |
        choco install openssl -y
        echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "OPENSSL_LIB_DIR=C:\Program Files\OpenSSL-Win64\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "OPENSSL_INCLUDE_DIR=C:\Program Files\OpenSSL-Win64\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      continue-on-error: false
    
    - name: Update version in Cargo.toml
      run: |
        $content = Get-Content -Path Cargo.toml -Raw
        $content = $content -replace 'version = "[^"]*"', "version = `"$env:VERSION`""
        Set-Content -Path Cargo.toml -Value $content
    
    - name: Update version in wix.toml
      run: |
        $content = Get-Content -Path wix/wix.toml -Raw
        $content = $content -replace 'product_version = "[^"]*"', "product_version = `"$env:VERSION`""
        $content = $content -replace 'version = "[^"]*"', "version = `"$env:VERSION`""
        Set-Content -Path wix/wix.toml -Value $content
    
    - name: Build Release Binary
      run: |
        $env:RUSTFLAGS="-C target-feature=+crt-static"
        cargo build --release
      env:
        RUST_BACKTRACE: 1
    
    - name: Run Tests
      run: cargo test --release
      continue-on-error: true
    
    - name: Build MSI Installer
      run: |
        Write-Host "Building MSI installer version $env:VERSION"
        cargo wix --nocapture --force --no-build --installer --output target/wix/
      env:
        RUST_BACKTRACE: 1
    
    - name: Verify MSI
      run: |
        $msiFile = Get-ChildItem -Path target\wix -Recurse -Filter *.msi | Select-Object -First 1
        if (-not $msiFile) {
          Write-Error "MSI file not found"
          exit 1
        }
        Write-Host "Found MSI: $($msiFile.FullName)"
    
    - name: Prepare Installer
      run: |
        mkdir -p installer
        $msiFile = Get-ChildItem -Path target\wix -Recurse -Filter *.msi | Select-Object -First 1
        $newName = "ZLT-System-Monitor-$env:VERSION.msi"
        Copy-Item -Path $msiFile.FullName -Destination "installer\$newName"
        echo "MSI_PATH=installer\$newName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    
    - name: Upload MSI Artifact
      uses: actions/upload-artifact@v4
      with:
        name: zlt-windows-installer-${{ steps.version.outputs.version }}
        path: installer/*.msi
        retention-days: 90
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: installer/*.msi
        name: Release ${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ZLT System Monitor Windows Installer v${{ steps.version.outputs.version }}
          
          ### Installation Instructions
          1. Download the MSI installer
          2. Right-click and select "Run as administrator"
          3. Follow the installation wizard
          
          ### System Requirements
          - Windows 10 or later
          - 64-bit system
          
          ### What's New
          - Automated installer build
          - System tray integration
          - Improved performance monitoring
        
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
